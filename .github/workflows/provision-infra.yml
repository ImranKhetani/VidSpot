name: Provision, Build, and Deploy Application

on:
  push:
    branches:
      - main
  workflow_dispatch:

jobs:
  deploy:
    runs-on: ubuntu-latest

    steps:
      # Step 1: Checkout the repository
      - name: Checkout repository
        uses: actions/checkout@v3

      # Step 2: Log in to Azure
      - name: Log in to Azure
        uses: azure/login@v1
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}

      # Step 3: Build and Publish Project
      - name: Build and Publish Project
        run: |
          echo "Building and publishing the project..."
          dotnet publish ./src/VidSpot.csproj -c Release -o ./src/publish
          echo "Build and publish completed."

          # Debug the contents of the publish directory
          echo "Contents of ./src/publish:"
          ls -R ./src/publish

      # Step 4: Validate Publish Directory
      - name: Validate Publish Directory
        run: |
          echo "Validating that the publish directory exists..."
          if [ ! -d ./src/publish ]; then
            echo "Error: Publish directory does not exist."
            exit 1
          fi
          echo "Validation passed. Publish directory exists."

      # Step 5: Deploy Infrastructure using Bicep template
      - name: Deploy Bicep template
        uses: azure/CLI@v1
        id: deploy-infra
        with:
          inlineScript: |
            echo "Creating Azure resources using Bicep..."

            # Create the deployment
            az deployment group create \
              --resource-group TechSolutionsRG \
              --name deployVidSpot \
              --template-file ./bicep/main.bicep \
              --parameters randomSeed=${{ github.run_id }}
            
            # Capture deployment outputs
            echo "Fetching deployment outputs..."
            az deployment group show \
              --resource-group TechSolutionsRG \
              --name deployVidSpot \
              --query "properties.outputs" > outputs.json

      # Step 6: Debug outputs.json content
      - name: Debug outputs.json content
        run: |
          echo "Contents of outputs.json:"
          cat outputs.json

      # Step 7: Parse Web App Names
      - name: Parse Output Variables
        run: |
          echo "Parsing web app names from outputs.json..."

          # Debugging specific outputs
          echo "webAppNameCentralIndia: $(jq '.webAppNameCentralIndia' outputs.json)"
          echo "webAppNameSoutheastAsia: $(jq '.webAppNameSoutheastAsia' outputs.json)"

          # Parse values
          WEBAPP_CI=$(jq -r '.webAppNameCentralIndia.value' outputs.json)
          WEBAPP_SEA=$(jq -r '.webAppNameSoutheastAsia.value' outputs.json)

          # Debug parsed values
          echo "WEBAPP_CI: $WEBAPP_CI"
          echo "WEBAPP_SEA: $WEBAPP_SEA"

          # Export environment variables
          echo "WEBAPP_CI=$WEBAPP_CI" >> $GITHUB_ENV
          echo "WEBAPP_SEA=$WEBAPP_SEA" >> $GITHUB_ENV

      # Step 8: Validate Web App Names
      - name: Validate Web App Names
        run: |
          echo "Validating web app names..."
          if [ -z "$WEBAPP_CI" ] || [ -z "$WEBAPP_SEA" ]; then
            echo "Error: Web app names are not set."
            exit 1
          fi
          echo "Validation passed. WEBAPP_CI and WEBAPP_SEA are set."

      # Step 9: Deploy Application Code to Central India Web App
      - name: Deploy Application Code to Web App (Central India)
        uses: azure/cli@v2
        with:
          inlineScript: |
            echo "Current Directory: $(pwd)"
            echo "Deploying from path: $(pwd)/src/publish"
            echo "Deploying to Web App (Central India): $WEBAPP_CI"
            
            # Deploy application
            az webapp deploy --name $WEBAPP_CI \
              --resource-group TechSolutionsRG \
              --src-path $(pwd)/src/publish \
              --type zip

      # Step 10: Deploy Application Code to Southeast Asia Web App
      - name: Deploy Application Code to Web App (Southeast Asia)
        uses: azure/cli@v2
        with:
          inlineScript: |
            echo "Current Directory: $(pwd)"
            echo "Deploying from path: $(pwd)/src/publish"
            echo "Deploying to Web App (Southeast Asia): $WEBAPP_SEA"
            
            # Deploy application
            az webapp deploy --name $WEBAPP_SEA \
              --resource-group TechSolutionsRG \
              --src-path $(pwd)/src/publish \
              --type zip
